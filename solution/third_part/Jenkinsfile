pipeline{
    agent any
    
    stages {
       
        stage("build"){
            steps{
                git "https://github.com/osmansays/no_challenge.git"
                dir("solution/first_part/") 
                    {
                    sh "chmod +X deploy.sh"
                    sh "docker build ../app/ -t osmansays/random:${BUILD_NUMBER}"
                    sh "docker build ../reverseproxy/ -t osmansays/rproxy:${BUILD_NUMBER}"
                    sh "VER=${BUILD_NUMBER} docker-compose up -d"
                    }
               

                echo 'building the application and deploying with Docker Compose'
            }
        }
        
        stage("Unit Testing"){
            steps{
                echo 'Running unit test cases on the application'
                sh "python solution/app/rand.test.py"
            }
        }
        stage("End to End Testing for Random App on Port 5000"){
            steps{
                echo 'testing the application on port 5000'
                sh "curl http://localhost:5000"
            }
        }

        stage("End to End Testing for Reverse Proxy functionality - http on port 80"){
            steps{
                echo 'testing the application on port 80'
                sh "curl http://localhost/random"
            }
        }
         stage("Ending the test and turn off testing environment"){
            steps{
                echo 'Running docker-compose down to turn off testing enviroment'
                dir("solution/first_part/") 
                    {
                    sh "VER=${BUILD_NUMBER} docker-compose down"
                    }
            }
        }
        

        stage("deploy"){
            steps{
                echo 'deploying the applications on Kubernetes cluster using Kubectl'
                dir("solution/second_part/solutions-deployment-yml") 
                    {
                    sh 'kubectl set image deployment/random-solution-deployment random=osmansays/random:${BUILD_NUMBER} rproxy=osmansays/rproxy:${BUILD_NUMBER} --record'
                    }
            }
        }
        
        stage('Check deployment status and rollback if failed'){
            steps{
            sh '''
                sleep 900 && \
                if [[ $(timeout 5 kubectl rollout status -f <deployment_file>.yaml) != *"successfully rolled out"* ]]; then     
                    kubectl rollout undo -f <deployment_file>.yaml
                    echo "Issue with latest deployment then rolled back to previous version"
                fi > /dev/null 2>&1 &

            '''
            }
        }

        
    }
}